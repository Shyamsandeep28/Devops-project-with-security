Welcome to the DevOps-security test repository for Maven projects

************************************************************

# DevOps CI/CD Pipeline with Security Scans

This project demonstrates a complete **Jenkins pipeline** that:
1. Checks out source code from GitHub
2. Scans source code for vulnerabilities using **Trivy**
3. Builds the application using **Maven**
4. Runs **SonarQube** code analysis
5. Builds a Docker image
6. Scans the Docker image with **Trivy**
7. Runs the application container (and keeps it running)

---

## 🚀 Prerequisites

Ensure the following are installed on the Jenkins server:

- **Jenkins** (with pipeline plugin)
- **Git**
- **Docker** (with non-root access for Jenkins user)
- **Maven**
- **Trivy** (for vulnerability scanning)
- **SonarQube** server (running and accessible)
- **Java 11+** (for Maven build)

---

## ⚙️ Jenkins Setup

### 1. Install Required Plugins
- **Pipeline**
- **Git**
- **SonarQube Scanner for Jenkins**
- **Docker Pipeline**

### 2. Configure SonarQube in Jenkins
1. Go to **Manage Jenkins → Configure System**
2. Search for **SonarQube servers**
3. Add:
   - **Name:** `SonarQube`
   - **Server URL:** `http://<SonarQube-IP>:9000`
   - **Authentication Token:** (Generated in SonarQube)

---

## 📂 Project Structure
.
├── Jenkinsfile
├── README.md
├── pom.xml
├── Dockerfile
└── src/



maven  insallation : install latest version instead of mvn install on terminal..
-----------------------------------------------------------------------------
install Java 
-----------------------------------------------------------------------------
sudo apt install openjdk-17-jdk -y

cd /opt
sudo wget https://dlcdn.apache.org/maven/maven-3/3.9.11/binaries/apache-maven-3.9.11-bin.tar.gz
sudo tar -xvzf apache-maven-3.9.11-bin.tar.gz
sudo ln -s /opt/apache-maven-3.9.11 /opt/maven
sudo ln -s /opt/maven/bin/mvn /usr/bin/mvn
mvn --version
-----------------------------------------------------


Change permission 
---------------------------------------------------
systemctl status jenkins
  482  vi /usr/lib/systemd/system/jenkins.service
  483  cat /usr/lib/systemd/system/jenkins.service
  484  clear
  485  systemctl daemon-reload
  486  systemctl restart jenkins

----------------------------------------------


use maven to clean the previous builds and  package the war file 
mvn clean
mvn package

check the outputs in target directory structure and war file with name devops.war

build the docker image with docker build command ( you can see dockerfile in present working directory)
docker build -t image-name:version .

docker rm -f `docker ps -aq`

Run a container from the image
docker run -d -p 8081:8080 --name mynewcontainer image-name:version    {8080 port is taken by jenkins}

Check your system IP in browser :
IP:8081/devops


Lab completed**
